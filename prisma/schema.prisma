generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  FIREBASE
  EMAIL_PASSWORD
  OTHER
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  CANCELLED
  FULFILLED
}

enum DiscountType {
  REFERRAL
  PROMOTION
  LOYALTY
  COMPENSATION
}

enum DiscountScope {
  ORDER
  ITEM
}

enum StockMovementType {
  INCOMING
  OUTGOING
  ADJUSTMENT
  WASTE
}

enum StockMovementReason {
  PURCHASE
  SALE
  BONUS
  WASTE
  INVENTORY
  MANUAL
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  authProvider   AuthProvider @default(FIREBASE)
  externalAuthId String?      @unique
  phone          String?
  firstName      String?
  lastName       String?
  displayName    String?
  avatarKey      String?
  termsAcceptedAt DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastLoginAt    DateTime?
  isActive       Boolean      @default(true)

  addresses            Address[]
  orders               Order[]
  discountCodesCreated DiscountCode[]        @relation("CreatedCodes")
  discountCodesOwned   DiscountCode[]        @relation("OwnedCodes")
  discountRedemptions  DiscountRedemption[]
  referralProfile      ReferralProfile?
  referralsReceived    ReferralInvite[]      @relation("InvitedUser")
  shareEvents          ReferralShare[]
  whatsappEvents       WhatsappInteraction[]
  loyaltyEvents        LoyaltyEvent[]
  inventoryCounts      InventoryCount[]      @relation("InventoryCounter")
}

model Address {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  label      String?
  line1      String
  line2      String?
  city       String
  province   String?
  postalCode String?
  notes      String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders Order[]
}

model Order {
  id                 String      @id @default(uuid())
  number             Int         @default(autoincrement())
  status             OrderStatus @default(DRAFT)
  user               User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?
  address            Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId          String?
  totalGross         Decimal     @db.Decimal(12, 2)
  totalNet           Decimal     @db.Decimal(12, 2)
  discountTotal      Decimal     @default(0) @db.Decimal(12, 2)
  note               String?
  channel            String      @default("web")
  whatsappLink       String?
  placedAt           DateTime?   @default(now())
  confirmedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  metadata           Json?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  items               OrderItem[]
  payments            PaymentRecord[]
  discountRedemptions DiscountRedemption[]
  stockMovements      StockMovement[]
  whatsappEvents      WhatsappInteraction[]
  loyaltyEvents       LoyaltyEvent[]
}

model OrderItem {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  label       String
  description String?
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  unitCost    Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  totalCost   Decimal  @db.Decimal(10, 2)
  metadata    Json?
  createdAt   DateTime @default(now())
}

model Product {
  id          String   @id @default(uuid())
  sku         String   @unique
  name        String
  slug        String   @unique
  description String?
  category    String?
  isActive    Boolean  @default(true)
  unitLabel   String?  @default("unidad")
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal  @db.Decimal(10, 2)
  taxRate     Decimal  @default(0) @db.Decimal(5, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems       OrderItem[]
  recipeComponents RecipeComponent[]
}

model DiscountCode {
  id             String        @id @default(uuid())
  code           String        @unique
  type           DiscountType  @default(PROMOTION)
  scope          DiscountScope @default(ORDER)
  value          Decimal       @db.Decimal(10, 2)
  percentage     Decimal?      @db.Decimal(5, 2)
  maxRedemptions Int           @default(1)
  startsAt       DateTime?
  expiresAt      DateTime?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  createdBy   User?   @relation("CreatedCodes", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  owner       User?   @relation("OwnedCodes", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId     String?

  redemptions DiscountRedemption[]
}

model DiscountRedemption {
  id           String       @id @default(uuid())
  code         DiscountCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  codeId       String
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  order        Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId      String?
  valueApplied Decimal      @db.Decimal(10, 2)
  redeemedAt   DateTime     @default(now())
  metadata     Json?
}

model ReferralProfile {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  code        String   @unique
  inviteLimit Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invites ReferralInvite[]
}

model ReferralInvite {
  id            String          @id @default(uuid())
  profile       ReferralProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
  invitedEmail  String?
  invitedPhone  String?
  invitedUser   User?           @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)
  invitedUserId String?
  sharedAt      DateTime        @default(now())
  acceptedAt    DateTime?
  notes         String?

  shareEvents ReferralShare[]
}

model ReferralShare {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  invite    ReferralInvite? @relation(fields: [inviteId], references: [id], onDelete: SetNull)
  inviteId  String?
  channel   String          @default("whatsapp")
  metadata  Json?
  createdAt DateTime        @default(now())
}

model WhatsappInteraction {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?
  event     String
  payload   Json?
  createdAt DateTime @default(now())
}

model LoyaltyEvent {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  order        Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId      String?
  type         String
  description  String?
  rewardIssued Boolean  @default(false)
  metadata     Json?
  createdAt    DateTime @default(now())
}

model Supplier {
  id          String   @id @default(uuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stockMovements StockMovement[]
}

model StockItem {
  id           String   @id @default(uuid())
  sku          String   @unique
  name         String
  category     String?
  unitLabel    String?
  safetyStock  Decimal  @default(0) @db.Decimal(12, 3)
  currentStock Decimal  @default(0) @db.Decimal(12, 3)
  averageCost  Decimal  @default(0) @db.Decimal(12, 3)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  movements    StockMovement[]
  recipeUsage  RecipeComponent[]
  countEntries InventoryCountEntry[]
}

model StockMovement {
  id          String              @id @default(uuid())
  stockItem   StockItem           @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
  stockItemId String
  order       Order?              @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId     String?
  supplier    Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  supplierId  String?
  movement    StockMovementType   @default(OUTGOING)
  reason      StockMovementReason @default(MANUAL)
  quantity    Decimal             @db.Decimal(12, 3)
  unitCost    Decimal?            @db.Decimal(12, 3)
  totalCost   Decimal?            @db.Decimal(12, 3)
  reference   String?
  notes       String?
  metadata    Json?
  occurredAt  DateTime            @default(now())
}

model RecipeComponent {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  stockItem   StockItem @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
  stockItemId String
  quantity    Decimal   @db.Decimal(12, 3)
  unitLabel   String?
  createdAt   DateTime  @default(now())
}

model PaymentRecord {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  method    String
  amount    Decimal   @db.Decimal(10, 2)
  fee       Decimal?  @db.Decimal(10, 2)
  status    String    @default("pending")
  paidAt    DateTime?
  reference String?
  metadata  Json?
  createdAt DateTime  @default(now())
}

model InventoryCount {
  id          String    @id @default(uuid())
  status      String    @default("draft")
  notes       String?
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  performedBy   User?   @relation("InventoryCounter", fields: [performedById], references: [id], onDelete: SetNull)
  performedById String?

  entries InventoryCountEntry[]
}

model InventoryCountEntry {
  id               String         @id @default(uuid())
  inventoryCount   InventoryCount @relation(fields: [inventoryCountId], references: [id], onDelete: Cascade)
  inventoryCountId String
  stockItem        StockItem      @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
  stockItemId      String
  expectedQty      Decimal        @db.Decimal(12, 3)
  countedQty       Decimal        @db.Decimal(12, 3)
  difference       Decimal        @db.Decimal(12, 3)
  notes            String?
}

model AuditLog {
  id        String   @id @default(uuid())
  entity    String
  entityId  String
  action    String
  actor     String?
  actorId   String?
  payload   Json?
  createdAt DateTime @default(now())
}
